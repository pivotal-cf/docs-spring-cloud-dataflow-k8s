---
title: Test your migration
owner: Spring Cloud Data Flow Release Engineering
---

Now you can try it all out using the instructions in this topic.

## Create supply-chain

Start by deploying the new supply chain and pipeline.

```sh
kubectl apply -f ./supply-chain/supply-chain.yaml
kubectl apply -f ./supply-chain/clustersourcetemplate.yaml
kubectl apply -f ./supply-chain/pipeline.yaml
```

## Deploy workload

1. Now you can create the workload resource. Run:

    ```sh
    tanzu apps workload create ticktock -f https://raw.githubusercontent.com/trisberg/ticktock-stream/main/config/workload.yaml -y
    ```

1. It takes about a minute for the workload to be processed. You should see a message like this:

    ```txt
    % tanzu apps workload get ticktock                        
    📡 Overview
    name:        ticktock
    type:        scdf-stream
    namespace:   default

    💾 Source
    type:       git
    url:        https://github.com/trisberg/ticktock-stream
    branch:     main
    revision:   main@sha1:ba89ba3007092433c172a2836d0d5f985a6b397b

    📦 Supply Chain
    name:   deploy-scdf-stream

    NAME              READY   HEALTHY   UPDATED   RESOURCE
    source-provider   True    True      3m11s     gitrepositories.source.toolkit.fluxcd.io/ticktock
    source-deployer   True    True      2m36s     runnables.carto.run/ticktock

    🚚 Delivery

    Delivery resources not found.

    💬 Messages
    No messages found.

    🛶 Pods
    NAME                        READY   STATUS      RESTARTS   AGE
    ticktock-rv22v-deploy-pod   0/1     Completed   0          3m4s

    To see logs: "tanzu apps workload tail ticktock --timestamp --since 1h"
    ```

1. To review the logs from the build pod, run:

    ```txt
    % kubectl logs ticktock-rv22v-deploy-pod
    Defaulted container "step-deploy" out of: step-deploy, prepare (init), place-scripts (init)
    CREATE ticktock
    Created new stream 'ticktock'
    Deployment request has been sent for stream 'ticktock'
    ```

## View stream status with SCDF shell

The stream apps will be deployed in the `scdf` namespace and you can review the status using some SCDF shell commands:

```txt
dataflow:>stream list
╔═══════════╤═══════════╤═════════════════╤═════════════════════════════════════════╗
║Stream Name│Description│Stream Definition│                 Status                  ║
╠═══════════╪═══════════╪═════════════════╪═════════════════════════════════════════╣
║ticktock   │           │time | log       │The stream has been successfully deployed║
╚═══════════╧═══════════╧═════════════════╧═════════════════════════════════════════╝
```

```txt
dataflow:>stream info ticktock
╔════════╤════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╤═══════════╤════════╗
║ Stream │                                                                                             Stream Definition                                                                                              │Description│ Status ║
║  Name  │                                                                                                                                                                                                            │           │        ║
╠════════╪════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╪═══════════╪════════╣
║ticktock│time --management.endpoints.web.exposure.include=health,info,bindings --management.metrics.tags.application.type=${spring.cloud.dataflow.stream.app.type:unknown}                                           │           │deployed║
║        │--management.metrics.tags.stream.name=${spring.cloud.dataflow.stream.name:unknown}                                                                                                                          │           │        ║
║        │--management.metrics.tags.application=${spring.cloud.dataflow.stream.name:unknown}-${spring.cloud.dataflow.stream.app.label:unknown}-${spring.cloud.dataflow.stream.app.type:unknown}                       │           │        ║
║        │--time.date-format=YYYY-mm-dd --management.metrics.tags.instance.index=${vcap.application.instance_index:${spring.cloud.stream.instanceIndex:0}}                                                            │           │        ║
║        │--wavefront.application.service=${spring.cloud.dataflow.stream.app.label:unknown}-${spring.cloud.dataflow.stream.app.type:unknown}-${vcap.application.instance_index:${spring.cloud.stream.instanceIndex:0}}│           │        ║
║        │--management.metrics.tags.application.guid=${spring.cloud.application.guid:unknown}                                                                                                                         │           │        ║
║        │--management.metrics.tags.application.name=${vcap.application.application_name:${spring.cloud.dataflow.stream.app.label:unknown}} --wavefront.application.name=${spring.cloud.dataflow.stream.name:unknown} │           │        ║
║        │| log --management.endpoints.web.exposure.include=health,info,bindings --management.metrics.tags.application.type=${spring.cloud.dataflow.stream.app.type:unknown}                                          │           │        ║
║        │--management.metrics.tags.stream.name=${spring.cloud.dataflow.stream.name:unknown}                                                                                                                          │           │        ║
║        │--management.metrics.tags.application=${spring.cloud.dataflow.stream.name:unknown}-${spring.cloud.dataflow.stream.app.label:unknown}-${spring.cloud.dataflow.stream.app.type:unknown}                       │           │        ║
║        │--management.metrics.tags.instance.index=${vcap.application.instance_index:${spring.cloud.stream.instanceIndex:0}}                                                                                          │           │        ║
║        │--wavefront.application.service=${spring.cloud.dataflow.stream.app.label:unknown}-${spring.cloud.dataflow.stream.app.type:unknown}-${vcap.application.instance_index:${spring.cloud.stream.instanceIndex:0}}│           │        ║
║        │--management.metrics.tags.application.guid=${spring.cloud.application.guid:unknown} --log.level=WARN                                                                                                        │           │        ║
║        │--management.metrics.tags.application.name=${vcap.application.application_name:${spring.cloud.dataflow.stream.app.label:unknown}} --wavefront.application.name=${spring.cloud.dataflow.stream.name:unknown} │           │        ║
╚════════╧════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╧═══════════╧════════╝

Stream Deployment properties: {
  "log" : {
    "spring.cloud.deployer.group" : "ticktock",
    "resource" : "docker:springcloudstream/log-sink-rabbit",
    "version" : "4.0.0",
    "spring.cloud.deployer.bootVersion" : "3"
  },
  "time" : {
    "spring.cloud.deployer.group" : "ticktock",
    "resource" : "docker:springcloudstream/time-source-rabbit",
    "version" : "4.0.0",
    "spring.cloud.deployer.bootVersion" : "3"
  }
}
```

## View stream status with SCDF Dashboard UI

1. To open a browser for the SCDF Dashboard UI, run:

    ```sh
    open $SCDF_URL/dashboard
    ```

1. From there, select **Streams** in the left panel. You should see the `ticktock` stream deployed.

    ![SCDF dashboard UI](./images/SCDF-ui-ticktock.png)

## View stream resources in TAP Developer Portal UI

1. Open the TAP Developer Portal (the TAP installation instructions should have provided a URL for you to use).
1. On the **Home** page, click **REGISTER ENTITY** and provide the **Repository URL** for the `catalog-info.yaml`. In the `ticktock` sample repo, this file is available at this URL: https://github.com/trisberg/ticktock-stream/blob/main/catalog/catalog-info.yaml.
1. Finish the registration by clicking **ANALYZE**, and then **IMPORT**.

1. Click **VIEW COMPONENT** to see the component view.
2. Click the **Runtime Resources** tab to see the Kubernetes resources that belong to the `ticktock` stream apps.

    ![TAP dev portal](./images/TAP-dev-portal-ticktock.png)

## Update the stream properties

You can update the deployment properties for the stream, if required.
Assume, for example, that you change the date format and push this change to the Git repository for the ticktock stream.
The supply-chain is monitoring the Git repository. When it detects this change, it will launch another stream deployment.

```txt
% tanzu apps workload get ticktock
📡 Overview
   name:        ticktock
   type:        scdf-stream
   namespace:   default

💾 Source
   type:       git
   url:        https://github.com/trisberg/ticktock-stream
   branch:     main
   revision:   main@sha1:b5b54aa09f9605dac3dbd725fdab05d416a10f03

📦 Supply Chain
   name:   deploy-scdf-stream

   NAME              READY     HEALTHY   UPDATED   RESOURCE
   source-provider   True      True      43m       gitrepositories.source.toolkit.fluxcd.io/ticktock
   source-deployer   Unknown   Unknown   7s        runnables.carto.run/ticktock

🚚 Delivery

   Delivery resources not found.

💬 Messages
   No messages found.

🛶 Pods
   NAME                        READY   STATUS      RESTARTS   AGE
   ticktock-kdv75-deploy-pod   1/1     Running     0          10s
   ticktock-rv22v-deploy-pod   0/1     Completed   0          43m

To see logs: "tanzu apps workload tail ticktock --timestamp --since 1h"
```

You can see a second deploy-pod that is running. You can also look at the logs from that pod:

```txt
% kubectl logs ticktock-kdv75-deploy-pod
Defaulted container "step-deploy" out of: step-deploy, prepare (init), place-scripts (init)
UPDATE ticktock
Update request has been sent for the stream 'ticktock'
```

You can see that the `apply.sh` detected an existing `ticktock` stream and updated the deployment properties.
