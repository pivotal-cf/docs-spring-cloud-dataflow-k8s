---
title: Configuring Monitoring for Spring Cloud Data Flow for Kubernetes
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes how to configure the Spring Cloud Data Flow for monitoring.
You can configure Spring Cloud Data Flow for Kuberntes to use either [Prometheus](#prometheus-monitoring) or [Wavefront](#wavefront-monitoring).

## <a id='wavefront-monitoring'></a> Monitoring with Wavefront

The Metrics for the Spring Cloud Data Flow server along with deployed streams and tasks can be sent to the Wavefront service.

### <a id='wavefront-account'></a> Wavefront Account

In order to use the Wavefront integration you need to have a Wavefront account.
You can sign up for an account at the [VMware Tanzu Observability by Wavefront](https://www.wavefront.com) web site.
Once you have an account, then you can generate an API Token for you account from the "API Access" tab on your user profile page. You can get to the profile page by clicking the settings symbol in the upper right-hand corner on the welcome page, and then clicking on your username/email address.

### <a id='wavefront-secret'></a> Wavefront API Secret

In order to send metrics to the Wavefront service we need to provide the API token generated in the previous section.
This API token must be provided in a secret in the namaespace where you plan to install Spring Cloud Data Flow for Kubernetes.

To create the secret you can run the following command replacing the `<Wavefront API token>` placeholder with you token:

```bash
kubectl create secret generic wavefront-api --from-literal=wavefront-api-token=<Wavefront API token>
```

We also need to mount this secret so it is avaiable for the Datan Flow server.
You need to add secret mount settings for the `data-flow` applications.
The following example shows the secret mount changes in `application.yaml`:

```yaml
      containers:
      - name: scdf-server
        volumeMounts:
          - name: wavefront-api
            mountPath: /workspace/runtime/secrets/wavefront-api
            readOnly: true
  ...

      volumes:
        - name: wavefront-api
          secret:
            secretName: wavefront-api

```

### <a id='wavefront-enable'></a> Enable Wavefront for Server, Streams and Tasks

Wavefront can be enabled for Spring Cloud Data Flow server, streams, or tasks based on your needs. Each is configured independently allowing one or all may be configured.

#### <a id='wavefront-enable-server'></a> Enable Wavefront for Server

To enable Wavefront for Spring Cloud Data Flow Server, modify the file `application.yaml` for the data-flow app making the following additions:

```
management:
  metrics:
    web:
      server:
        request:
          autotime:
            enabled: true
        metric-name: spring.cloud.dataflow.http.server.requests
  export:
    wavefront:
      enabled: true
      api-token: ${wavefront-api-token}
      uri: https://<your-wavefront-uri>.wavefront.com
      source: <your-source-name>
```

Change the values of `<your-wavefront-uri>` and `<your-source-name>` to those matching your setup.
The `api-token` value will be automatically resolves from the secret.

#### <a id='wavefront-enable-streams'></a> Enable Wavefront for Streams

To enable Wavefront for deployed streams, modify the file `application.yaml` for the data-flow app making the following additions:

```yaml
spring:
  cloud:
    dataflow:
      applicationProperties:
        stream:
          management:
            metrics:
              export:
                wavefront:
                  enabled: true
                  api-token: ${wavefront-api-token}
                  uri: https://<your-wavefront-uri>.wavefront.com
                  source: <your-source-name>
```

Change the values of `<your-wavefront-uri>` and `<your-source-name>` to those matching your setup.
The `api-token` value will be automatically resolves from the secret.

#### <a id='wavefront-enable-tasks'></a> Enable Wavefront for Tasks

To enable Wavefront for deployed tasks, modify the file `application.yaml` for the data-flow app making the following additions:

```yaml
spring:
  cloud:
    dataflow:
      applicationProperties:
        task:
          management:
            metrics:
              export:
                wavefront:
                  enabled: true
                  api-token: ${wavefront-api-token}
                  uri: https://<your-wavefront-uri>.wavefront.com
                  source: <your-source-name>
```

Change the values of `<your-wavefront-uri>` and `<your-source-name>` to those matching your setup.
The `api-token` value will be automatically resolves from the secret.

With this configuration in place, after the Spring Cloud Data Flow server is started, metrics from the configured items will be sent to Wavefront.

## <a id='prometheus-monitoring'></a> Monitoring with Prometheus

In order to support both short-lived and long-lived application monitoring, the task and stream applications deployed by Data Flow and Skipper can use the [Prometheus RSocket Proxy](https://github.com/micrometer-metrics/prometheus-rsocket-proxy).
Other monitoring technologies that use the Micrometer library are also supported, but their configuration differs from the example shown in the next listing.
The Data Flow Dashboard provides a convenient link to custom [Stream and Task Grafana dashboards](https://github.com/spring-cloud/spring-cloud-dataflow/tree/master/src/grafana/prometheus/docker/grafana) that you can install into your Grafana server.


The following example shows how to configure monitoring for all deployed tasks and stream applications that use Prometheus over an RSocket gateway by configuring the following section in Data Flow's `application.yaml`:

```
spring:
  cloud:
    dataflow:
      applicationProperties:
        stream:
          management:
            metrics:
              export:
                prometheus:
                  enabled: true
                  rsocket:
                    enabled: true
                    host: prometheus-proxy
                    port: 7001
        task:
          management:
            metrics:
              export:
                prometheus:
                  enabled: true
                  rsocket:
                    enabled: true
                    host: prometheus-proxy
                    port: 7001
      grafana-info:
        url: 'https://grafana:3000'
```

You should change the Grafana `url` and Prometheus host/port values should be changed for your specific environment.
The Data Flow microsite contains more information on [stream monitoring](https://dataflow.spring.io/docs/feature-guides/streams/monitoring/#kubernetes) and [task monitoring](https://dataflow.spring.io/docs/feature-guides/batch/monitoring/#prometheus-1).

Since these common application properties are passed to the deployed task and stream applications, if you are using a different monitoring infrastrure that is supported by the micrometer library, you can set the appropriate Spring Boot configuration values for your monitoring infrastructure underneath the `applicationProperties.stream` and `applicationProperties.task` sections described earlier.


## <a id='next-installing-scdf'></a> Next: Installing SCDF for Kubernetes

Proceed to the [Installing SCDF for Kubernetes](installing-scdf-for-kubernetes.html) topic for installation instructions.
