---
title: Connecting to VMware Spring Cloud® Data Flow for Kubernetes
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes methods of connecting to VMware Spring Cloud® Data Flow for Kubernetes (SCDF for Kubernetes). You can do this using either the built-in SCDF dashboard or the SCDF shell.

## <a id='connect-scdf-dashboard'></a> Use the SCDF Dashboard

You can access the SCDF for Kubernetes dashboard in two ways: using the DNS name configured for the Ingress resource (if you installed one), or using the IP address assigned to the Data Flow server Service resource.

### <a id='scdf-dashboard-with-ingress'></a> If You Installed an Ingress Resource

You can use the DNS name of the Ingress resource to access the SCDF dashboard.

To access the dashboard:

1. Run the following `kubectl` command to determine the DNS name:

    ```
    $ kubectl get ingress scdf-ingress
    NAME           HOSTS                            ADDRESS          PORTS   AGE
    scdf-ingress   data-flow.35.232.203.79.xip.io   35.225.206.207   80      23h
    ```

    The value shown for `HOSTS` is the DNS name.

1. Append `/dashboard` to the DNS name obtained in the previous step. In this example, you can access the dashboard by visiting the following URL in your web browser:
    
    ```
    http://data-flow.35.232.203.79.xip.io/dashboard
    ```

### <a id='scdf-dashboard-without-ingress'></a> If You Did Not Install an Ingress Resource

You can use the Data Flow server Service resource to access the SCDF dashboard.

To access the dashboard:

1. Run the following `kubectl` command to determine the IP address assigned to the `scdf-server` resource:

    ```
    $ kubectl get service scdf-server
    NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
    scdf-server   ClusterIP   10.55.253.237   <none>        80/TCP    23h
    ```

    The value shown for `CLUSTER-IP` is the IP address.

1. If you have not configured the `scdf-server` service to use a `LoadBalancer` type resource, skip to step 3.

    &nbsp;

    If the `scdf-server` service uses a `LoadBalancer` resource, append `/dashboard` to the IP address obtained in the previous step. In this example, you can access the dashboard by visiting the following address in your web browser:

    ```
    http://10.55.253.237/dashboard
    ```

1. If the `scdf-server` service does not use a `LoadBalancer` resource, you can use port forwarding to access the service. Run the following `kubectl` command (this example uses a local port of `8080`):

    ```
    $ kubectl port-forward service/scdf-server 8080:80
    Forwarding from 127.0.0.1:8080 -> 80
    Forwarding from [::1]:8080 -> 80
    Handling connection for 8080
    ```

    You can now access the dashboard by visiting the following address in your web browser:
    
    ```
    http://localhost:8080/dashboard
    ```

## <a id='connecting-scdf-shell'></a> Use the SCDF Shell

To run the Spring Cloud Data Flow shell, you must have the following installed on your local machine:

* The Spring Cloud Data Flow shell; [download from the Spring Artifact repository](https://repo.spring.io/milestone/org/springframework/cloud/spring-cloud-dataflow-shell/2.7.2/spring-cloud-dataflow-shell-2.7.2.jar) (JAR file)
* Java version 8 or later

<p class="note"><strong>Note:</strong> To download the shell, you can also follow the link on the <strong>About</strong> page of the SCDF dashboard.</p>

You can start the shell using `java -jar`. To list all available options, pass the `--help` option.

```
$ java -jar spring-cloud-dataflow-shell-2.7.2.jar --help
Data Flow Options:
  --dataflow.uri=<uri>                              Address of the Data Flow Server [default: http://localhost:9393].
  --dataflow.username=<USER>                        Username of the Data Flow Server [no default].
  --dataflow.password=<PASSWORD>                    Password of the Data Flow Server [no default].
  --dataflow.credentials-provider-command=<COMMAND> Executes an external command which must return an
                                                    OAuth Bearer Token (Access Token prefixed with 'Bearer '),
                                                    e.g. 'Bearer 12345'), [no default].
...
```

The shell includes various authentication settings to support different security configurations for the Data Flow server.
The following examples assume that the server is not secured and that you can connect to the server given only the server URI.

You can connect the shell to the SCDF for Kubernetes server in two ways: using the DNS name configured for the Ingress resource (if you installed one), or using the IP address assigned to the Data Flow server Service resource.

### <a id='scdf-shell-with-ingress'></a> If You Installed an Ingress Resource

You can use the DNS name of the Ingress resource to connect to the SCDF server.

To connect to the server:

1. Run the following `kubectl` command to determine the DNS name:

    ```
    $ kubectl get ingress scdf-ingress
    NAME           HOSTS                            ADDRESS          PORTS   AGE
scdf-ingress   data-flow.35.232.203.79.xip.io   35.225.206.207   80      23h
    ```

    The value shown for `HOSTS` is the DNS name.

1. Start the shell, passing the `dataflow.uri` option with a value matching the DNS name obtained in the previous step. In this example, you can connect to the server by starting the shell with the following command:
    
    ```
    $ java -jar spring-cloud-dataflow-shell-2.7.2.jar --dataflow.uri=http://data-flow.35.232.203.79.xip.io
    ```

### <a id='scdf-shell-without-ingress'></a> If You Did Not Install an Ingress Resource

You can use the Data Flow server Service resource to connect to the SCDF server.

To connect to the server:

1. Run the following `kubectl` command to determine the IP address assigned to the `scdf-server` resource:

    ```
    $ kubectl get service scdf-server
    NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
    scdf-server   ClusterIP   10.55.253.237   <none>        80/TCP    23h
    ```

    The value shown for `CLUSTER-IP` is the IP address.

1. If you have not configured the `scdf-server` service to use a `LoadBalancer` type resource, skip to step 3.

    &nbsp;

    If the `scdf-server` service uses a `LoadBalancer` resource, start the shell and pass the `dataflow.uri` option with a value matching the IP address obtained in the previous step. In this example, you can connect to the server by starting the shell with the following command:

    ```
    $ java -jar spring-cloud-dataflow-shell-2.7.2.jar --dataflow.uri=http://10.55.253.237
    ```

1. If the `scdf-server` service does not use a `LoadBalancer` resource, you can use port forwarding to access the service. Run the following `kubectl` command (this example uses a local port of `8080`):

    ```
    $ kubectl port-forward service/scdf-server 8080:80
    Forwarding from 127.0.0.1:8080 -> 80
    Forwarding from [::1]:8080 -> 80
    Handling connection for 8080
    ```

    You can now connect to the server by starting the shell and passing the `dataflow.uri` option with a value of `http://localhost:8080`:
    
    ```
    $ java -jar spring-cloud-dataflow-shell-2.7.2.jar --dataflow.uri=http://localhost:8080
    ```

### <a id='scdf-shell-running-commands'></a> Run Shell Commands

Once the shell is running, you will see the following command prompt:

```
dataflow:>
```

You can now issue any of the available commands.
For a guide to using the shell, see the [Shell](https://docs.spring.io/spring-cloud-dataflow/docs/2.7.2/reference/htmlsingle/#shell) section of the [Spring Cloud Data Flow Reference Guide](https://docs.spring.io/spring-cloud-dataflow/docs/2.7.2/reference/htmlsingle/).

## <a id='next-pipeline'></a> Next: Create a Data Pipeline

For steps to begin building a data pipeline, see [Creating a Data Pipeline with VMware Spring Cloud® Data Flow for Kubernetes](getting-started-pipeline.html).
